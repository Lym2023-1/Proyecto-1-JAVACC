/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.HashSet;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<MOV:  "Mov">
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >		

}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
        
}


	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(
		  main() {salida = "Archivo ";}|(
		    <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}





	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */



	TOKEN : /* Nombres de valores comunes para comandos */
{
  < ORIENTATION :<NORTH> | <SOUTH>| <EAST>| <WEST> >
| < LEFT: "left"> 
| < VIEW :<FRONT> | <BACK> >
| < AROUND: "around">
| < #BACK: "back" >
| < #NORTH: "north" >
| < #SOUTH: "south" >
| < #EAST: "east" >
| < #WEST: "west" >
| < #FRONT: "front" >


}



TOKEN : /* Nombres de Condiciones */

{
< FACING: "facing"> 
|<CANPUT:"canput">
|<CANPICK:"canpick"> 
|<CANMOVEINDIR:"canmoveindir">
|<CANJUMPINDIR:"canjumpindir"> 
|<CANMOVETOTHE:"canmovetothe"> 
|<CANJUMPTOTHE:"canjumptothe">
|<NOT:"not">
} 

TOKEN : /* Nombres de Comandos grandes */
{
  < ASSIGNTO : "assignto" >
| < GOTO : "goto" >
| < MOVE : "move" >
| < TURN : "turn" >
| < FACE : "face" >
| < MOVETOTHE : "movetothe" >
| < JUMPTOTHE : "jumptothe" >
| < MOVEINDIR : "moveindir" >
| < JUMPINDIR : "jumpindir" >
| < NOP : "nop" >
}






TOKEN : /* Palabras reservadas*/
{
  < ROBOT_R : "robot_r" >
| < THEN : "then" >
| < ELSE : "else" >
| < DO : "do" >
| < VARS : "vars" >
| < PROCS : "procs" >
| < WHILE : "while" >
| < IF : "if" >
| < REPEAT : "repeat" >
}

TOKEN : /* Declaracion para nombres */
{
  < NAME :(< LETTER >)(< DIGIT >| < LETTER >)* >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}

	
TOKEN_MGR_DECLS : /* centinelas y estructuras de datos para almacenar datos definidos por el usuario*/
{
  HashMap < String, Integer > procedimientos = new HashMap < String, Integer > ();
  HashMap < String, String > variables = new HashMap < String, String > ();
  HashMap < String, Integer > variables_temporales = new HashMap < String, Integer > ();
  HashSet < String> condiciones = new HashSet < String> ();
  boolean ejecutarInstrucciones=false;
  boolean condicionEstaActiva=true;
    {

      	//Se guardan todas las condiciones
	    condiciones.add("facing");condiciones.add("canput");condiciones.add("canpick");condiciones.add("canmoveindir");
	  	condiciones.add("canjumpindir");condiciones.add("canmovetothe");condiciones.add("canjumptothe");condiciones.add("not");
	}
}



void main() :
{}
{
  //Funcion principal
  < ROBOT_R >(vars())?(procs())? {token_source.ejecutarInstrucciones=true;}block()
}

void vars() :
{String var1, var2;}
{
 	/* 
	*Funcion para variables
	*Agrega a la estructura de datos correspondiente las variables con un valor indefinido
	*Se cosidera incorrecto invocar VARS y no crear variables
 	*/
	  < VARS > var1 = < NAME >.image{token_source.variables.put(var1, "Undefined");}  //Una sola variable
	  ("," var2 = < NAME >.image{token_source.variables.put(var2, "Undefined");})*";" //Variables adicionales 
}

void procs() :
{}
{
 	/* 
  	*Funcion para procedimientos
	*Se cosidera incorrecto invocar PROCS y no crear procedimientos
 	*/

  	< PROCS >(procDefinition())+
}


	
void procDefinition() :
{String procName;int cantidadParametros;}
{
	//Funcion para crear procedimientos
  
  procName = < NAME >.image  //Se define el nombre del procedimiento
  "[" "|" cantidadParametros = parameters() {saveProcInfo(procName.toLowerCase(), cantidadParametros);}"|" //Se guarda el proc luego de contar sus parametros
  multipleExecution() //Se realizan multiples llamados a comandos y procedimientos
  {token_source.variables_temporales = new HashMap < String,Integer > ();}"]"  //se eliminan los parametros que fueron usados por la función
  
}

int parameters() :
{String parameter1, parameter2;}
{
   	/* 
	  *Se revisa la estructura de los parametros y se cuenta la cantidad
	  *Puede que un procedimiento no tenga parametros
	  *Se guardan los parametros como variables temporales, ya que no nos interesa su valor, se guarda como 0
 	*/

	  
	  ( parameter1 = < NAME >.image       {token_source.variables_temporales.put(parameter1,0);} //Se guarda un parametro
	  ("," parameter2 = < NAME >.image    {token_source.variables_temporales.put(parameter2,0);})*)? //se guardan los demas parametros
	  
	  {return token_source.variables_temporales.size();} //Se retorna el numero total de parametros del procedimiento	
}

void saveProcInfo(String procName, int params) :
{}
	
{
  //Se guarda el nombre del procedimiento y se revisa que no sea variable ni condicion
  {
			if (token_source.variables.containsKey(procName))throw new Error("El procedimiento ya se declaró como variable");
			else if (token_source.condiciones.contains(procName))throw new Error("El procedimiento es una condición");
			else token_source.procedimientos.put(procName,params);
  }
}


void block() :
{}
{
    /* 
	  *Definicion de bloque de instrucciones
	  *Pueden ser una o mas instrucciones entre []
	  *O puede ser una sola instruccion
 	*/
  ("[" multipleExecution() "]") |(singleExecution())
}


	
void multipleExecution() :
{}
	
{
  //Una o mas instrucciones
  singleExecution()(";" singleExecution())*
}


void singleExecution() :
{}
{
  //una instruccion puede ser un comando, un procedimiento o una estructura de control
  controlStructure()|declaredProcedureCall()| procedureCall()
}
	
void procedureCall() :
{String procName;int cantidadParametros;}
{
     /* 
	  *Se llama un procedimiento del usuario
	  *Se comprueba que el nombre este definido y tenga la cantidad justa de parametros
 	*/
	  procName = < NAME >.image ":" cantidadParametros = declaredParameters()
	  {
	    if (token_source.procedimientos.containsKey(procName.toLowerCase()) == false) throw new Error("El procedimiento " + procName + " no esta definido " + token.beginLine);
	    else if (token_source.procedimientos.get(procName.toLowerCase()) != cantidadParametros) throw new Error("Faltan o sobran parametros al llamar al procedimiento: " + procName);
	  }
}
	
void controlStructure() :
{}
{
  (IF())|(WHILE())|(REPEAT())
}



int declaredParameters() :
{int cantidad = 0;String parameter1, parameter2;}
	//Se revisa que los parametros esten definidos o que sean numeros y se retorna la cantidad
{
 	(((parameter1 = < NAME >.image {checkParameters(parameter1.toLowerCase());})| parameter1= <NUM>.image){ cantidad++;System.out.println(cantidad); } //para un parametro
 	("," ((parameter2 = < NAME >.image{checkParameters(parameter2.toLowerCase());})|parameter2=<NUM>.image) { cantidad++;})*)? // para los parametros

	{return cantidad;}
}


void checkParameters(String parameter) :
{}
{
  {
    //Se revisa si un parametro esta definido o si es variable
    if (token_source.variables.containsKey(parameter) == false && 
    token_source.variables_temporales.containsKey(parameter) == false) throw new Error(parameter + " no esta definido" + token_source.variables_temporales);
  }
}


void IF() :
{}
{
  	//condicional if then else, los tres deben aparecer para considerarse correcto
 	< IF > ":" token_source.condicionEstaActiva=conditionalCall() < THEN >":" block() { token_source.condicionEstaActiva=!token_source.condicionEstaActiva;}(< ELSE >":" block())?{ token_source.condicionEstaActiva=true;}
}

void WHILE() :
{}
{
    //Gramatica del ciclo while
 	< WHILE > ":" conditionalCall() < DO > ":" block()
}


void REPEAT() :
{int num;}
{
  //Gramatica para repeat, admite numeros y variables
  < REPEAT > ":"(num = num()|(num = getVarNum())) block()
}



void declaredProcedureCall() :
{int n, Cx, Cy;String d, x, name, o;}
	{
		//comandos
		//(n = num()|(n = getVarNum())) se usa para guardar en n un numero, o el valor de una variable

	  	
		  < ASSIGNTO > ":" n = num() "," name = < NAME >.image
		  {checkParameters(name.toLowerCase());}
		  {if (token_source.ejecutarInstrucciones&& token_source.variables.containsKey(name)); token_source.variables.put(name, Integer.toString(n)); }
		| < TURN >      ":" (d = < AROUND >.image | d= <LEFT>.image  | d=<RIGHT>.image )
		  {if (token_source.ejecutarInstrucciones) {
				if (d.equals("right")) { world.turnRight();salida= "Giro a la derecha"; }
				else if (d.equals("left")) { world.turnRight();world.turnRight();world.turnRight();salida= "Giro a la izquierda"; }
				else if (d.equals("around")) { world.turnRight();world.turnRight();salida= "Giro doble"; }



		        }



		}
		| < FACE >      ":" (o = < ORIENTATION >.image)
		  {if (token_source.ejecutarInstrucciones && token_source.condicionEstaActiva) {
		    int direction=0;
			if (o.equals("north"))direction=0;
			else if (o.equals("south"))direction=1;
			else if (o.equals("east"))direction=2;
			else if (o.equals("west"))direction=3;
			while (world.getFacing()!=direction) { world.turnRight();}
			salida= "La orientacion actual es: "+o; 
			

		    } }
		| < GOTO > 	    ":" (Cx = num()|(Cx = getVarNum()))","(Cy = num()|(Cy = getVarNum()))
		  {if (token_source.ejecutarInstrucciones&& token_source.condicionEstaActiva) world.setPostion(Cx,Cy);; }
		| < MOVE > 	    ":" (n = num()|(n = getVarNum())) {move(n);}
		



			  
		| < PUT >       ":" (n = num()|(n = getVarNum()))  "," (x=<BALLOONS>.image|x=<CHIPS>.image )
		  {if (token_source.ejecutarInstrucciones&& token_source.condicionEstaActiva) {
				if (x.equals("balloons")) { while(n >0) { world.putBalloon();n--; }; }
				else if (x.equals("chips")) { while(n >0) { world.putChip();n--; }; }

		    } }
		| < PICK >      ":" (n = num()|(n = getVarNum()))  "," (x=<BALLOONS>.image|x=<CHIPS>.image )
		  {if (token_source.ejecutarInstrucciones&& token_source.condicionEstaActiva) {
				if (x.equals("balloons")) { while(n >0) { world.pickupBalloon();n--; }; }
				else if (x.equals("chips")) { while(n >0) { world.pickupChip();n--; }; }

		    } }

		  
		| < MOVETOTHE > ":" (n = num()|(n = getVarNum()))  "," (d = < VIEW >.image|d= <LEFT>.image  | d=<RIGHT>.image)
		  {if (token_source.ejecutarInstrucciones&& token_source.condicionEstaActiva) { 

				
				if (d.equals("front")) {
					if (world.getFacing()==0) {  while(n >0) { world.up();n--; }; }   
					else if (world.getFacing()==1) {  while(n >0) { world.down();n--; }; }   
					else if (world.getFacing()==2) {  while(n >0) { world.left();n--; }; }   
					else if (world.getFacing()==3) {  while(n >0) { world.right();n--; }; } }   

				else if (d.equals("left")) { 
					if (world.getFacing()==0) {  while(n >0) { world.left();n--; }; }   
					else if (world.getFacing()==1) {  while(n >0) { world.right();n--; }; }   
					else if (world.getFacing()==2) {  while(n >0) { world.up();n--; }; }   
					else if (world.getFacing()==3) {  while(n >0) { world.down();n--; }; } }

				
				else if (d.equals("right")) { 
					if (world.getFacing()==0) {  while(n >0) { world.right();n--; }; }   
					else if (world.getFacing()==1) {  while(n >0) { world.left();n--; }; }   
					else if (world.getFacing()==2) {  while(n >0) { world.down();n--; }; }   
					else if (world.getFacing()==3) {  while(n >0) { world.up();n--; }; } }
				
				else if (d.equals("back")) { 
					if (world.getFacing()==0) {  while(n >0) { world.down();n--; }; }   
					else if (world.getFacing()==1) {  while(n >0) { world.up();n--; }; }   
					else if (world.getFacing()==2) {  while(n >0) { world.left();n--; }; }      
					else if (world.getFacing()==3) {  while(n >0) { world.right();n--; }; }}   
				
				
				
				salida= "Se ha avanzado hacia la direccion deseada "; 



		    } }
		| < MOVEINDIR > ":" (n = num()|(n = getVarNum()))  "," (d = < ORIENTATION >.image)
		  {if (token_source.ejecutarInstrucciones&& token_source.condicionEstaActiva) { 




				int facing=0;
				if (d.equals("north")) { facing=0;}
				else if (d.equals("south")) { facing=1; }
				else if (d.equals("east")) { facing=2; }
				else if (d.equals("west")) { facing=3; }
				while (world.getFacing()!=facing) { world.turnRight();}
				move(n);
				salida= "Se ha avanzado en la direccion "; 
		} }



		| < JUMPTOTHE > ":" (n = num()|(n = getVarNum()))  "," (d = < VIEW >.image|d= <LEFT>.image  | d=<RIGHT>.image)
		  {if (token_source.ejecutarInstrucciones&& token_source.condicionEstaActiva) {
				
				int xPos = (int)world.getPosition().getX();
				int yPos = (int)world.getPosition().getY();
				if (d.equals("front")) {
					if (world.getFacing()==0)world.setPostion(xPos,yPos-n);
					else if (world.getFacing()==1)world.setPostion(xPos,yPos+n);
					else if (world.getFacing()==2)world.setPostion(xPos+n,yPos);
					else if (world.getFacing()==3)world.setPostion(xPos-n,yPos); }

				else if (d.equals("left")) { 
					if (world.getFacing()==0)world.setPostion(xPos-n,yPos);
					else if (world.getFacing()==1)world.setPostion(xPos+n,yPos);
					else if (world.getFacing()==2)world.setPostion(xPos,yPos-n);
					else if (world.getFacing()==3)world.setPostion(xPos,yPos+n); }

				
				else if (d.equals("right")) { 
					if (world.getFacing()==0)world.setPostion(xPos+n,yPos);
					else if (world.getFacing()==1)world.setPostion(xPos-n,yPos);
					else if (world.getFacing()==2)world.setPostion(xPos,yPos+n);
					else if (world.getFacing()==3)world.setPostion(xPos,yPos-n); }
				
				else if (d.equals("back")) { 
					if (world.getFacing()==0)world.setPostion(xPos,yPos+n);
					else if (world.getFacing()==1)world.setPostion(xPos,yPos-n);
					else if (world.getFacing()==2)world.setPostion(xPos-n,yPos);
					else if (world.getFacing()==3)world.setPostion(xPos+n,yPos); }
				
				
				
				salida= "Se ha saltado "; 



		    } }
		| < JUMPINDIR > ":" (n = num()|(n = getVarNum()))  "," (d = < ORIENTATION >.image)
		  {if (token_source.ejecutarInstrucciones&& token_source.condicionEstaActiva) {
				int direction=0;
				int xPos = (int)world.getPosition().getX();
				int yPos = (int)world.getPosition().getY();
				if (d.equals("north")) { direction=0; world.setPostion(xPos,yPos-n); }
				else if (d.equals("south")) { direction=1;world.setPostion(xPos,yPos+n); }
				else if (d.equals("east")) { direction=2;world.setPostion(xPos+n,yPos); }
				else if (d.equals("west")) { direction=3;world.setPostion(xPos-n,yPos); }
				while (world.getFacing()!=direction) { world.turnRight();}
				
				
				salida= "Se ha saltado "; 



		    }
		  }
		| <NOP> ":"
		  
	}

boolean conditionalCall():	
{int n; String x,d,o;Boolean ans=false; int xPos=(int)world.getPosition().getX();int yPos = (int)world.getPosition().getY();}
	{
		< FACING > 		":" o=<ORIENTATION>.image
		{
  
					if (world.getFacing()==0 && o.equals("north"))return true;
					else if (world.getFacing()==1 && o.equals("south"))return true;
					else if (world.getFacing()==2 && o.equals("east"))return true;
					else if (world.getFacing()==3 && o.equals("west"))return true;
					else return false;
					}


		|<CANPUT> 		":" (n=num()|(n=getVarNum())) "," (x=<BALLOONS>.image|x=<CHIPS>.image )
		{ return false;}
		|<CANPICK> 		":" (n=num()|(n=getVarNum())) "," (x=<BALLOONS>.image|x=<CHIPS>.image )
		{ return false;}

		
		|<CANMOVEINDIR> ":" (n=num()|(n=getVarNum())) ","  d=<ORIENTATION>.image
		{ 
				
				if (d.equals("north")) { ans=world.blockedInRange(xPos, yPos, n, 0);}
				else if (d.equals("south")) { ans=world.blockedInRange(xPos, yPos, n, 1); }
				else if (d.equals("east")) { ans=world.blockedInRange(xPos, yPos, n, 2); }
				else if (d.equals("west")) { ans=world.blockedInRange(xPos, yPos, n, 3); }
				
				salida= "Se ha comprobado si se puede avanzar en dir ";
				return ans;
		}



		|<CANJUMPINDIR> ":" (n=num()|(n=getVarNum())) ","  d=<ORIENTATION>.image
				{

				if (d.equals("north")) {  ans=world.isBlocked(new Point(xPos,yPos-n));} 
				else if (d.equals("south")){ans=world.isBlocked(new Point(xPos,yPos+n)); }
				else if (d.equals("east")) {ans=world.isBlocked(new Point(xPos+n,yPos));}
				else if (d.equals("west")) {ans=world.isBlocked(new Point(xPos-n,yPos));}
				
				
				
				salida= "Es posible saltar en dir "; 
				return ans;


		    
		  }
		|<CANMOVETOTHE> ":" (n=num()|(n=getVarNum())) "," (o = < VIEW >.image|o= <LEFT>.image  | o=<RIGHT>.image)

	{ 

					
					
					if (o.equals("front")) {
						if (world.getFacing()==0) {  ans=world.blockedInRange(xPos, yPos, n, 0); }    
						else if (world.getFacing()==1) {   ans=world.blockedInRange(xPos, yPos, n, 1); }     
						else if (world.getFacing()==2) {   ans=world.blockedInRange(xPos, yPos, n, 3); }   
						else if (world.getFacing()==3) {   ans=world.blockedInRange(xPos, yPos, n, 2); } }   
	
					else if (o.equals("left")) { 
						if (world.getFacing()==0) {   ans=world.blockedInRange(xPos, yPos, n, 3); }  
						else if (world.getFacing()==1) {   ans=world.blockedInRange(xPos, yPos, n, 2); }   
						else if (world.getFacing()==2) {   ans=world.blockedInRange(xPos, yPos, n, 0); }  
						else if (world.getFacing()==3) {   ans=world.blockedInRange(xPos, yPos, n, 1); } }
	
					
					else if (o.equals("right")) { 
						if (world.getFacing()==0) {   ans=world.blockedInRange(xPos, yPos, n, 2); }   
						else if (world.getFacing()==1) {   ans=world.blockedInRange(xPos, yPos, n, 3); }
						else if (world.getFacing()==2) {   ans=world.blockedInRange(xPos, yPos, n, 1); }  
						else if (world.getFacing()==3) {   ans=world.blockedInRange(xPos, yPos, n, 0); } }
					
					else if (o.equals("back")) { 
						if (world.getFacing()==0) {   ans=world.blockedInRange(xPos, yPos, n, 1); }   
						else if (world.getFacing()==1) {   ans=world.blockedInRange(xPos, yPos, n, 0); }
						else if (world.getFacing()==2) {   ans=world.blockedInRange(xPos, yPos, n, 3); }      
						else if (world.getFacing()==3) {   ans=world.blockedInRange(xPos, yPos, n, 2); } }   
					
					
					
					salida= "Se ha avanzado hacia la direccion deseada ";
					return ans;



		    } 

		


		|<CANJUMPTOTHE> ":" (n=num()|(n=getVarNum())) "," (o = < VIEW >.image|o= <LEFT>.image  | o=<RIGHT>.image)

				{
				
				int posX = (int)world.getPosition().getX();
				int posY = (int)world.getPosition().getY();
			
				if (o.equals("front")) {
					if (world.getFacing()==0)ans=world.isBlocked(new Point(posX,yPos-n));
					else if (world.getFacing()==1)ans=world.isBlocked(new Point(xPos,yPos+n));
					else if (world.getFacing()==2)ans=world.isBlocked(new Point(xPos+n,yPos));
					else if (world.getFacing()==3)ans=world.isBlocked(new Point(xPos-n,yPos)); }

				else if (o.equals("left")) { 
					if (world.getFacing()==0)ans=world.isBlocked(new Point(xPos-n,yPos));
					else if (world.getFacing()==1)ans=world.isBlocked(new Point(xPos+n,yPos));
					else if (world.getFacing()==2)ans=world.isBlocked(new Point(xPos,yPos-n));
					else if (world.getFacing()==3)ans=world.isBlocked(new Point(xPos,yPos+n)); }

				
				else if (o.equals("right")) { 
					if (world.getFacing()==0)ans=world.isBlocked(new Point(xPos+n,yPos));
					else if (world.getFacing()==1)ans=world.isBlocked(new Point(xPos-n,yPos));
					else if (world.getFacing()==2)ans=world.isBlocked(new Point(xPos,yPos+n));
					else if (world.getFacing()==3)ans=world.isBlocked(new Point(xPos,yPos-n)); }
				
				else if (o.equals("back")) { 
					if (world.getFacing()==0)ans=world.isBlocked(new Point(xPos,yPos+n));
					else if (world.getFacing()==1)ans=world.isBlocked(new Point(xPos,yPos-n));
					else if (world.getFacing()==2)ans=world.isBlocked(new Point(xPos-n,yPos));
					else if (world.getFacing()==3)ans=world.isBlocked(new Point(xPos+n,yPos)); }
				
				
				
				salida= "Es posible saltar hacia "; 
				return ans;


		   		 } 

		
		|<NOT >":" ans=conditionalCall()
		{ return !ans;}
	} 










void move(int n):
{}
{
  
			{if (token_source.ejecutarInstrucciones) {int i=n;
				if (world.facingWest()) { while(n >0) { world.left();n--; };salida= "Desplazamiento de "+i+" pasos al oeste"; }
				else if (world.facingEast())  { while(n >0) { world.right();n--; };salida= "Desplazamiento de "+i+" pasos al este"; }
				else if (world.facingSouth())  { while(n >0) { world.down();n--; };salida= "Desplazamiento de "+i+" pasos al sur"; }
				else if (world.facingNorth())  { while(n >0) { world.up();n--; }; salida= "Desplazamiento de "+i+" pasos al norte";} } }
}







int num() throws Error :
{	int total = 1;}
{
  < NUM >
  {
    try{
      total = Integer.parseInt(token.image);
      }
    catch (NumberFormatException ee){
      throw new Error("No es posible convertir en numero: " + token.image + " !!");
    }
    
  }
  {return total;}
}



int getVarNum() throws Error :
{Token token;int number;}
{
  (token = < NAME >)
  {
    //Se revisa si existe la variable
    checkParameters(token.image.toLowerCase());

    try{
	  if (token_source.variables.containsKey(token.image.toLowerCase())) number = Integer.parseInt(token_source.variables.get(token.image.toLowerCase()));
	  else number = token_source.variables_temporales.get(token.image.toLowerCase()); 
    }
    catch (NumberFormatException ee){
      throw new Error("Variable con valor undefined" + token.beginLine + token_source.variables + token.image + token_source.variables_temporales);
    }			
   
  }
  { return number;}
}






