/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
*/



options
{
  static = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(NuevoParser)
package uniandes.teolen.parserJavaCC.newParser;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.HashSet;

public class NuevoParser
{
}

PARSER_END(NuevoParser)

SKIP :
{
  " "
| 	"\r"
| 	"\t"
| "\n"
}

TOKEN : /* Nombres de valores comunes para comandos */
{
  < ORIENTATION :<NORTH> | <SOUTH>| <EAST>| <WEST> >
| < DIRECTION: <LEFT>|<RIGHT>>
| < VIEW :<FRONT> | <BACK> >
| < AROUND: "around">

| < #LEFT : "left" >
| < #RIGHT : "right" >
| < #BACK: "back" >
| < #NORTH: "north" >
| < #SOUTH: "south" >
| < #EAST: "east" >
| < #WEST: "west" >
| < #FRONT: "front" >


}

TOKEN : /* Nombres de Comandos */
{
  < MOV : "Mov" >
| < PUT : "Put" >
| < PICK : "Pick" >
| < POP : "Pop" >
| < GO : "GO" >
| < HOP : "HOP" >		
}

TOKEN : /* Nombres de Condiciones */

{
< FACING: "facing"> 
|<CANPUT:"canput">
|<CANPICK:"canpick"> 
|<CANMOVEINDIR:"canmoveindir">
|<CANJUMPINDIR:"canjumpindir"> 
|<CANMOVETOTHE:"canmovetothe"> 
|<CANJUMPTOTHE:"canjumptothe">
|<NOT:"not">
} 

TOKEN : /* Nombres de Comandos grandes */
{
  < ASSIGNTO : "assignto" >
| < GOTO : "goto" >
| < MOVE : "move" >
| < TURN : "turn" >
| < FACE : "face" >
| < MOVETOTHE : "movetothe" >
| < JUMPTOTHE : "jumptothe" >
| < MOVEINDIR : "moveindir" >
| < JUMPINDIR : "jumpindir" >
| < NOP : "nop" >
}



TOKEN : /* Nombres de objetos */
{
< ITEM : < BALLOONS>|< CHIPS>  >
| <#BALLOONS : "balloons" >
| <#CHIPS : "chips" >	
}

TOKEN : /* Declaracion de numeros */
{
  < NUM : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /* Palabras reservadas*/
{
  < ROBOT_R : "robot_r" >
| < THEN : "then" >
| < ELSE : "else" >
| < DO : "do" >
| < VARS : "vars" >
| < PROCS : "procs" >
| < WHILE : "while" >
| < IF : "if" >
| < REPEAT : "repeat" >
}

TOKEN : /* Declaracion para nombres */
{
  < NAME :(< LETTER >)(< DIGIT >| < LETTER >)* >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}



TOKEN_MGR_DECLS : /* Estructuras de datos para almacenar datos definidos por el usuario*/
{
  HashMap < String, Integer > procedimientos = new HashMap < String, Integer > ();
  HashMap < String, String > variables = new HashMap < String, String > ();
  HashMap < String, Integer > variables_temporales = new HashMap < String, Integer > ();
  HashSet < String> condiciones = new HashSet < String> ();
    {

      	//Se guardan todas las condiciones
	    condiciones.add("facing");condiciones.add("canput");condiciones.add("canpick");condiciones.add("canmoveindir");
	  	condiciones.add("canjumpindir");condiciones.add("canmovetothe");condiciones.add("canjumptothe");condiciones.add("not");
	}
}

void main() :
{}
{
  //Funcion principal
  < ROBOT_R >(vars())?(procs())?block()
}

void vars() :
{String var1, var2;}
{
 	/* 
	*Funcion para variables
	*Agrega a la estructura de datos correspondiente las variables con un valor indefinido
	*Se cosidera incorrecto invocar VARS y no crear variables
 	*/
	  < VARS > var1 = < NAME >.image{token_source.variables.put(var1, "Undefined");}  //Una sola variable
	  ("," var2 = < NAME >.image{token_source.variables.put(var2, "Undefined");})*";" //Variables adicionales 
}

void procs() :
{}
{
 	/* 
  	*Funcion para procedimientos
	*Se cosidera incorrecto invocar PROCS y no crear procedimientos
 	*/

  	< PROCS >(procDefinition())+
}

void procDefinition() :
{String procName;int cantidadParametros;}
{
	//Funcion para crear procedimientos
  
  procName = < NAME >.image  //Se define el nombre del procedimiento
  "[" "|" cantidadParametros = parameters() {saveProcInfo(procName.toLowerCase(), cantidadParametros);}"|" //Se guarda el proc luego de contar sus parametros
  multipleExecution() //Se realizan multiples llamados a comandos y procedimientos
  {token_source.variables_temporales = new HashMap < String,Integer > ();}"]"  //se eliminan los parametros que fueron usados por la función
  
}

int parameters() :
{String parameter1, parameter2;}
{
   	/* 
	  *Se revisa la estructura de los parametros y se cuenta la cantidad
	  *Puede que un procedimiento no tenga parametros
	  *Se guardan los parametros como variables temporales, ya que no nos interesa su valor, se guarda como 0
 	*/

	  
	  ( parameter1 = < NAME >.image       {token_source.variables_temporales.put(parameter1,0);} //Se guarda un parametro
	  ("," parameter2 = < NAME >.image    {token_source.variables_temporales.put(parameter2,0);})*)? //se guardan los demas parametros
	  
	  {return token_source.variables_temporales.size();} //Se retorna el numero total de parametros del procedimiento	
}

void saveProcInfo(String procName, int params) :
{}
	
{
  //Se guarda el nombre del procedimiento y se revisa que no sea variable ni condicion
  {
			if (token_source.variables.containsKey(procName))throw new Error("El procedimiento ya se declaró como variable");
			else if (token_source.condiciones.contains(procName))throw new Error("El procedimiento es una condición");
			else token_source.procedimientos.put(procName,params);
  }
}

void block() :
{}
{
    /* 
	  *Definicion de bloque de instrucciones
	  *Pueden ser una o mas instrucciones entre []
	  *O puede ser una sola instruccion
 	*/
  ("[" multipleExecution() "]") |(singleExecution())
}

void multipleExecution() :
{}
	
{
  //Una o mas instrucciones
  singleExecution()(";" singleExecution())*
}

void singleExecution() :
{}
{
  //una instruccion puede ser un comando, un procedimiento o una estructura de control
  controlStructure()|declaredProcedureCall()| procedureCall()
}

void procedureCall() :
{String procName;int cantidadParametros;}
{
     /* 
	  *Se llama un procedimiento del usuario
	  *Se comprueba que el nombre este definido y tenga la cantidad justa de parametros
 	*/
	  procName = < NAME >.image ":" cantidadParametros = declaredParameters()
	  {
	    if (token_source.procedimientos.containsKey(procName.toLowerCase()) == false) throw new Error("El procedimiento " + procName + " no esta definido " + token.beginLine);
	    else if (token_source.procedimientos.get(procName.toLowerCase()) != cantidadParametros) throw new Error("Faltan o sobran parametros al llamar al procedimiento: " + procName);
	  }
}

void controlStructure() :
{}
{
  (IF())|(WHILE())|(REPEAT())
}

int declaredParameters() :
{int cantidad = 0;String parameter1, parameter2;}
	//Se revisa que los parametros esten definidos o que sean numeros y se retorna la cantidad
{
 	(((parameter1 = < NAME >.image {checkParameters(parameter1.toLowerCase());})| parameter1= <NUM>.image){ cantidad++;System.out.println(cantidad); } //para un parametro
 	("," ((parameter2 = < NAME >.image{checkParameters(parameter2.toLowerCase());})|parameter2=<NUM>.image) { cantidad++;})*)? // para los parametros

	{return cantidad;}
}

void checkParameters(String parameter) :
{}
{
  {
    //Se revisa si un parametro esta definido o si es variable
    if (token_source.variables.containsKey(parameter) == false && 
    token_source.variables_temporales.containsKey(parameter) == false) throw new Error(parameter + " no esta definido" + token_source.variables_temporales);
  }
}

void IF() :
{}
{
  	//condicional if then else, los tres deben aparecer para considerarse correcto
 	< IF > ":" conditionalCall() < THEN >":" block() < ELSE >":" block()
}

void WHILE() :
{}
{
    //Gramatica del ciclo while
 	< WHILE > ":" conditionalCall() < DO > ":" block()
}

void REPEAT() :
{int num;}
{
  //Gramatica para repeat, admite numeros y variables
  < REPEAT > ":"(num = num()|(num = getVarNum())) block()
}

void declaredProcedureCall() :
{int n, Cx, Cy;String d, x, name, o;}
	{
		//comandos
		//(n = num()|(n = getVarNum())) se usa para guardar en n un numero, o el valor de una variable
		//Algunas declaraciones son del tipo: (d = < VIEW >.image|d=< DIRECTION >.image) o (d = < AROUND >.image | d=< DIRECTION >.image)
		//Lo anterior para evitar problemas de parseo, ya que hay valores comunes que podrian confundirse POR JAVACC si se declararan como tokens
	  	
		  < ASSIGNTO > ":" n = num() "," name = < NAME >.image
		  {checkParameters(name.toLowerCase());
		   if (token_source.variables.containsKey(name)) token_source.variables.put(name, Integer.toString(n));}
		| < TURN >      ":" (d = < AROUND >.image | d=< DIRECTION >.image)
		| < FACE >      ":" (o = < ORIENTATION >.image)
		| < GOTO > 	    ":" (Cx = num()|(Cx = getVarNum()))","(Cy = num()|(Cy = getVarNum()))
		| < MOVE > 	    ":" (n = num()|(n = getVarNum()))
		| < PUT >       ":" (n = num()|(n = getVarNum()))  "," (x=<ITEM>.image) 
		| < PICK >      ":" (n = num()|(n = getVarNum()))  "," (x=<ITEM>.image) 
		| < MOVETOTHE > ":" (n = num()|(n = getVarNum()))  "," (d = < VIEW >.image|d=< DIRECTION >.image)
		| < MOVEINDIR > ":" (n = num()|(n = getVarNum()))  "," (d = < ORIENTATION >.image)
		| < JUMPTOTHE > ":" (n = num()|(n = getVarNum()))  "," (d = < VIEW >.image|d=< DIRECTION >.image)
		| < JUMPINDIR > ":" (n = num()|(n = getVarNum()))  "," (d = < ORIENTATION >.image)
		| <NOP> ":"
	}

void conditionalCall():	
{int n; String x,d,o;}
	{
		< FACING > 		":" o=<ORIENTATION>.image
		|<CANPUT> 		":" (n=num()|(n=getVarNum())) "," (x=<ITEM>.image) 
		|<CANPICK> 		":" (n=num()|(n=getVarNum())) "," (x=<ITEM>.image) 
		|<CANMOVEINDIR> ":" (n=num()|(n=getVarNum())) ","  d=<ORIENTATION>.image
		|<CANJUMPINDIR> ":" (n=num()|(n=getVarNum())) ","  d=<ORIENTATION>.image
		|<CANMOVETOTHE> ":" (n=num()|(n=getVarNum())) "," (o = < VIEW >.image|o=< DIRECTION >.image)
		|<CANJUMPTOTHE> ":" (n=num()|(n=getVarNum())) "," (o = < VIEW >.image|o=< DIRECTION >.image)
		|<NOT >":" conditionalCall()
	} 


int num() throws Error :
{	int total = 1;}
{
  < NUM >
  {
    try{
      total = Integer.parseInt(token.image);
      }
    catch (NumberFormatException ee){
      throw new Error("No es posible convertir en numero: " + token.image + " !!");
    }
    return total;
  }
}

int getVarNum() throws Error :
{Token token;int number;}
{
  (token = < NAME >)
  {
    //Se revisa si existe la variable
    checkParameters(token.image.toLowerCase());

    try{
	  if (token_source.variables.containsKey(token.image.toLowerCase())) number = Integer.parseInt(token_source.variables.get(token.image.toLowerCase()));
	  else number = token_source.variables_temporales.get(token.image.toLowerCase()); 
    }
    catch (NumberFormatException ee){
      throw new Error("Variable con valor undefined" + token.beginLine + token_source.variables + token.image + token_source.variables_temporales);
    }			
    return number;
  }
}
